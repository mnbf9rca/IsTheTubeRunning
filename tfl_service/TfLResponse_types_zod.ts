// Generated by ts-to-zod
import { z } from "zod";
import { Place } from "./TfLResponse_types";

export const passengerFlowSchema = z.object({
  timeSlice: z.string().optional(),
  value: z.number().optional(),
});

export const trainLoadingSchema = z.object({
  line: z.string(),
  lineDirection: z.string(),
  platformDirection: z.string(),
  direction: z.string(),
  naptanTo: z.string(),
  timeSlice: z.string(),
  value: z.number(),
});

export const orderedRouteSchema = z.object({
  name: z.string(),
  naptanIds: z.array(z.string()),
  serviceType: z.string(),
});

export const lineGroupSchema = z.object({
  naptanIdReference: z.string().optional(),
  stationAtcoCode: z.string().optional(),
  lineIdentifier: z.array(z.string()).optional(),
});

export const lineModeGroupSchema = z.object({
  modeName: z.string(),
  lineIdentifier: z.array(z.string()),
});

export const additionalPropertiesSchema = z.object({
  category: z.string().optional(),
  key: z.string().optional(),
  sourceSystemKey: z.string().optional(),
  value: z.string().optional(),
  modified: z.string().optional(),
});

export const placeSchema: z.ZodSchema<Place> = z.lazy(() =>
  z.object({
    id: z.string(),
    url: z.string().optional(),
    commonName: z.string(),
    distance: z.number().optional(),
    placeType: z.string(),
    additionalProperties: z.array(additionalPropertiesSchema).optional(),
    children: z.array(placeSchema).optional(),
    childrenUrls: z.array(z.string()).optional(),
    lat: z.number(),
    lon: z.number(),
  })
);

export const matchedRouteSchema = z.object({
  routeCode: z.string().optional(),
  name: z.string(),
  direction: z.string().optional(),
  originationName: z.string(),
  destinationName: z.string(),
  originator: z.string(),
  destination: z.string(),
  serviceType: z.string().optional(),
  validTo: z.string().optional(),
  validFrom: z.string().optional(),
});

export const lineServiceTypeInfoSchema = z.object({
  name: z.string(),
  uri: z.string().optional(),
});

export const validityPeriodSchema = z.object({
  fromDate: z.string(),
  toDate: z.string(),
  isNow: z.boolean().optional(),
});

export const crowdingSchema = z.object({
  passengerFlows: z.array(passengerFlowSchema).optional(),
  trainLoadings: z.array(trainLoadingSchema).optional(),
});

export const identifierSchema = z.object({
  id: z.string(),
  name: z.string(),
  uri: z.string(),
  fullName: z.string().optional(),
  type: z.string(),
  crowding: crowdingSchema.optional(),
  routeType: z.string(),
  status: z.string(),
});

export const matchedStopSchema = z.object({
  routeId: z.number().optional(),
  parentId: z.string().optional(),
  stationId: z.string().optional(),
  icsId: z.string(),
  topMostParentId: z.string().optional(),
  direction: z.string().optional(),
  towards: z.string().optional(),
  modes: z.array(z.string()),
  stopType: z.string(),
  stopLetter: z.string().optional(),
  zone: z.string(),
  accessibilitySummary: z.string().optional(),
  hasDisruption: z.boolean().optional(),
  lines: z.array(identifierSchema),
  status: z.boolean().optional(),
  id: z.string(),
  url: z.string().optional(),
  name: z.string(),
  lat: z.number(),
  lon: z.number(),
});

export const stopPointSequenceSchema = z.object({
  lineId: z.string(),
  lineName: z.string(),
  direction: z.string(),
  branchId: z.number(),
  nextBranchIds: z.array(z.number()),
  prevBranchIds: z.array(z.number()),
  stopPoint: z.array(matchedStopSchema),
  serviceType: z.union([z.literal("Regular"), z.literal("Night")]),
});

export const routeSequenceSchema = z.object({
  lineId: z.string(),
  lineName: z.string(),
  direction: z.string(),
  isOutboundOnly: z.boolean(),
  mode: z.string(),
  lineStrings: z.array(z.string()),
  stations: z.array(matchedStopSchema),
  stopPointSequences: z.array(stopPointSequenceSchema),
  orderedLineRoutes: z.array(orderedRouteSchema),
});

export const stopPointSchema = z.object({
  naptanId: z.string(),
  platformName: z.string().optional(),
  indicator: z.string().optional(),
  stopLetter: z.string().optional(),
  modes: z.array(z.string()),
  icsCode: z.string().optional(),
  smsCode: z.string().optional(),
  stopType: z.string(),
  stationNaptan: z.string(),
  accessibilitySummary: z.string().optional(),
  hubNaptanCode: z.string().optional(),
  lines: z.array(identifierSchema),
  lineGroup: z.array(lineGroupSchema),
  lineModeGroups: z.array(lineModeGroupSchema),
  fullName: z.string().optional(),
  naptanMode: z.string().optional(),
  status: z.boolean(),
  id: z.string(),
  url: z.string().optional(),
  commonName: z.string(),
  distance: z.number().optional(),
  placeType: z.string().optional(),
  additionalProperties: z.array(additionalPropertiesSchema).optional(),
  children: z.array(placeSchema).optional(),
  childrenUrls: z.array(z.string()).optional(),
  lat: z.number(),
  lon: z.number(),
});

export const routeSectionNaptanEntrySequenceSchema = z.object({
  ordinal: z.number(),
  stopPoint: stopPointSchema,
});

export const stopPointArraySchema = z.array(stopPointSchema);

export const disruptedRouteSchema = z.object({
  id: z.string().optional(),
  lineId: z.string().optional(),
  routeCode: z.string().optional(),
  name: z.string().optional(),
  lineString: z.string().optional(),
  direction: z.string().optional(),
  originationName: z.string().optional(),
  destinationName: z.string().optional(),
  via: routeSectionNaptanEntrySequenceSchema.optional(),
  isEntireRouteSection: z.boolean().optional(),
  validTo: z.string().optional(),
  validFrom: z.string().optional(),
  routeSectionNaptanEntrySequence: z
    .array(routeSectionNaptanEntrySequenceSchema)
    .optional(),
});

export const disruptionSchema = z.object({
  category: z
    .union([
      z.literal("Undefined"),
      z.literal("RealTime"),
      z.literal("PlannedWork"),
      z.literal("Information"),
      z.literal("Event"),
      z.literal("Crowding"),
      z.literal("StatusAlert"),
    ])
    .optional(),
  type: z.string().optional(),
  categoryDescription: z.string().optional(),
  description: z.string().optional(),
  summary: z.string().optional(),
  additionalInfo: z.string().optional(),
  created: z.string().optional(),
  lastUpdate: z.string().optional(),
  affectedRoutes: z.array(disruptedRouteSchema).optional(),
  affectedStops: z.array(stopPointSchema).optional(),
  closureText: z.string().optional(),
});

export const lineStatusSchema = z.object({
  id: z.number(),
  lineId: z.string(),
  statusSeverity: z.number(),
  statusSeverityDescription: z.string().optional(),
  reason: z.string().optional(),
  created: z.string().optional(),
  modified: z.string().optional(),
  validityPeriods: z.array(validityPeriodSchema).optional(),
  disruption: disruptionSchema,
});

export const lineSchema = z.object({
  id: z.string(),
  name: z.string(),
  modeName: z.string(),
  disruptions: z.array(disruptionSchema).optional(),
  created: z.string().optional(),
  modified: z.string().optional(),
  lineStatuses: z.array(lineStatusSchema),
  routeSections: z.array(matchedRouteSchema),
  serviceTypes: z.array(lineServiceTypeInfoSchema),
  crowding: crowdingSchema.optional(),
});

export const lineArraySchema = z.array(lineSchema);
